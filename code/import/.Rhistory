v <- g
}
v <- template
for (i in (k-1):1){
for (j in 1:(n-k)){
h <-  merge(v[j,1:i],(v[v[,(i+1)] > v[j,i],(i+1):k]), by = NULL)
if (j == 1){
g <- h
}
else {
g <- rbind(g,h)
}
}
v <- g
}
View(template)
template[j,1:i]
h <-  merge(v[j,1:i],(v[v[,(i+1)] > v[j,i],(i+1):k]), by = NULL)
v <- template
i <- 3
j <- 1
merge(v[j,1:i],(v[v[,(i+1)] > v[j,i],(i+1):k]), by = NULL)
v[j,1:i]
(v[v[,(i+1)] > v[j,i],(i+1):k])
h <-  merge(as.data.frame(v[j,1:i]),as.data.frame(v[v[,(i+1)] > v[j,i],(i+1):k]), by = NULL)
as.data.frame(v[j,1:i])
as.data.frame(t(v[j,1:i]))
h <-  merge(as.data.frame(t(v[j,1:i])),as.data.frame(v[v[,(i+1)] > v[j,i],(i+1):k]), by = NULL)
as.data.frame(v[v[,(i+1)] > v[j,i],(i+1):k])
for (i in 1:length(base[,1])){
for (j in (length(base[1,])+1):1){
if (j == (length(base[1,])+1)){
output[i,j] <- cells - base[i,(j-1)]
}
else if (j==1){
output[i,j] <- base[i,j]
}
else{
output[i,j] <- base[i,(j)] - base[i,(j-1)]
}
}
}
##General Algorithmic Solution to Birthday Problem
rm(list = ls())
n <- 9
k <- 4
template <- matrix(nrow=(n-k), ncol = k)
for (i in 1:k){
for (j in 1:(n-k)){
template[j,i] <- i + j - 1
}
}
base <- template
for (i in (k-1):1){
for (j in 1:length(base[,1])) {
if (j != length(base[,1])){
h <- merge(t(base[j,1:i]),as.data.frame(base[j:length(base[,1]),(i+1):k]),by = NULL)
}
else{
h <- cbind(t(base[j,1:i]),t(base[j:length(base[,1]),(i+1):k]))
}
if (j == 1){
g <- h
}
else{
g <- rbind(as.matrix(g),as.matrix(h))
}
}
base <- g
}
##interpret
cells <- n+1
output <- 0*cbind(base,base[,1])
for (i in 1:length(base[,1])){
for (j in (length(base[1,])+1):1){
if (j == (length(base[1,])+1)){
output[i,j] <- cells - base[i,(j-1)]
}
else if (j==1){
output[i,j] <- base[i,j]
}
else{
output[i,j] <- base[i,(j)] - base[i,(j-1)]
}
}
}
calc <- matrix[ncol = 2, nrow = length(output[,1]))
calc <- matrix[ncol = 2, nrow = length(output[,1])
calc <- matrix(ncol = 2, nrow = length(output[,1])
calc <- matrix(ncol = 2, nrow = length(output[,1])
)
for (i in 1:length(output[,1])){
c <- n
m <- 1
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
calc[i,1] <- max(output[i,])
calc[i,2] <- m
}
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
m <- (factorial(c)/(factorial(output[i,j])factorial(c-output[i,j])))*m
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
for (i in 1:length(output[,1])){
c <- n
m <- 1
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
calc[i,1] <- max(output[i,])
calc[i,2] <- m
}
warnings()
c <- n
View(output)
for (i in 1:length(output[,1])){
c <- n + 1
m <- 1
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
calc[i,1] <- max(output[i,])
calc[i,2] <- m
}
View(calc)
sum(calc[,2])
5^10
4^10
sum(calc[,2])/4^10
View(base)
View(output)
View(calc)
View(output)
10*9*8*6
10*9*8*7*6
sum(calc[,2])/5^10
i <- 1
c <- n + 1
m <- 1
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
c <- n + 1
m <- 1
for (j in 1:1){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
c <- n + 1
m <- 1
for (j in 1:2){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
c <- n + 1
m <- 1
for (j in 1:4){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
c <- n + 1
m <- 1
for (j in 1:5){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
c <- n + 1
m <- 1
for (j in 1:4){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
factorial(c)
factorial(c-output[i,j])
output[i,j]
View(output)
j <- 5
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
View(h)
View(output)
check <- vector()
check <- vector()
for (i in 1:length(output[,1])){
check[i] <- output[i,1] + output[i,2]*10 + output[i,3]*10^2 + output[i,4]*10^3 + output[i,5]*10^4
}
check <- order[check]
check <- order[check[i:7260]]
library(dplyr)
check <- arrange(check,V1)
check <- as.data.frame(check)
check <- arrange(check,V1)
View(check)
check <- arrange(check,check)
View(check)
##General Algorithmic Solution to Birthday Problem
rm(list = ls())
n <- 3
k <- 2
template <- matrix(nrow=(n-k), ncol = k)
for (i in 1:k){
for (j in 1:(n-k)){
template[j,i] <- i + j - 1
}
}
View(template)
for (i in 1:k){
for (j in 1:(n-k+1)){
template[j,i] <- i + j - 1
}
}
n <- 3
k <- 2
template <- matrix(nrow=(n-k), ncol = k)
for (i in 1:k){
for (j in 1:(n-k+1)){
template[j,i] <- i + j - 1
}
}
template <- matrix(nrow=(n-k+1), ncol = k)
for (i in 1:k){
for (j in 1:(n-k+1)){
template[j,i] <- i + j - 1
}
}
base <- template
for (i in (k-1):1){
for (j in 1:length(base[,1])) {
if (j != length(base[,1])){
h <- merge(t(base[j,1:i]),as.data.frame(base[j:length(base[,1]),(i+1):k]),by = NULL)
}
else{
h <- cbind(t(base[j,1:i]),t(base[j:length(base[,1]),(i+1):k]))
}
if (j == 1){
g <- h
}
else{
g <- rbind(as.matrix(g),as.matrix(h))
}
}
base <- g
}
View(base)
cells <- n+1
output <- 0*cbind(base,base[,1])
for (i in 1:length(base[,1])){
for (j in (length(base[1,])+1):1){
if (j == (length(base[1,])+1)){
output[i,j] <- cells - base[i,(j-1)]
}
else if (j==1){
output[i,j] <- base[i,j]
}
else{
output[i,j] <- base[i,(j)] - base[i,(j-1)]
}
}
}
View(output)
calc <- matrix(ncol = 2, nrow = length(output[,1]))
for (i in 1:length(output[,1])){
c <- n + 1
m <- 1
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
calc[i,1] <- max(output[i,])
calc[i,2] <- m
}
View(calc)
View(output)
View(calc)
View(h)
View(output)
##General Algorithmic Solution to Birthday Problem
rm(list = ls())
n <- 5
k <- 2
template <- matrix(nrow=(n-k+1), ncol = k)
for (i in 1:k){
for (j in 1:(n-k+1)){
template[j,i] <- i + j - 1
}
}
base <- template
for (i in (k-1):1){
for (j in 1:length(base[,1])) {
if (j != length(base[,1])){
h <- merge(t(base[j,1:i]),as.data.frame(base[j:length(base[,1]),(i+1):k]),by = NULL)
}
else{
h <- cbind(t(base[j,1:i]),t(base[j:length(base[,1]),(i+1):k]))
}
if (j == 1){
g <- h
}
else{
g <- rbind(as.matrix(g),as.matrix(h))
}
}
base <- g
}
##interpret--convert to list of macrostates
cells <- n+1
output <- 0*cbind(base,base[,1])
for (i in 1:length(base[,1])){
for (j in (length(base[1,])+1):1){
if (j == (length(base[1,])+1)){
output[i,j] <- cells - base[i,(j-1)]
}
else if (j==1){
output[i,j] <- base[i,j]
}
else{
output[i,j] <- base[i,(j)] - base[i,(j-1)]
}
}
}
##weight by # microstates
calc <- matrix(ncol = 2, nrow = length(output[,1]))
for (i in 1:length(output[,1])){
c <- n + 1
m <- 1
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
calc[i,1] <- max(output[i,])
calc[i,2] <- m
}
sum(calc[,2])
3^6
rm(list = ls())
n <- 10
k <- 4
template <- matrix(nrow=(n-k+1), ncol = k)
for (i in 1:k){
for (j in 1:(n-k+1)){
template[j,i] <- i + j - 1
}
}
base <- template
for (i in (k-1):1){
for (j in 1:length(base[,1])) {
if (j != length(base[,1])){
h <- merge(t(base[j,1:i]),as.data.frame(base[j:length(base[,1]),(i+1):k]),by = NULL)
}
else{
h <- cbind(t(base[j,1:i]),t(base[j:length(base[,1]),(i+1):k]))
}
if (j == 1){
g <- h
}
else{
g <- rbind(as.matrix(g),as.matrix(h))
}
}
base <- g
}
##interpret--convert to list of macrostates
cells <- n+1
output <- 0*cbind(base,base[,1])
for (i in 1:length(base[,1])){
for (j in (length(base[1,])+1):1){
if (j == (length(base[1,])+1)){
output[i,j] <- cells - base[i,(j-1)]
}
else if (j==1){
output[i,j] <- base[i,j]
}
else{
output[i,j] <- base[i,(j)] - base[i,(j-1)]
}
}
}
##weight by # microstates
calc <- matrix(ncol = 2, nrow = length(output[,1]))
for (i in 1:length(output[,1])){
c <- n + 1
m <- 1
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
calc[i,1] <- max(output[i,])
calc[i,2] <- m
}
sum(calc[,2])
5^11
(factorial(22)/(factorial(2)(factorial(20))))*(1/365)
(factorial(22)/(factorial(2)*(factorial(20))))*(1/365)
(factorial(21)/(factorial(2)*(factorial(20))))*(1/365)
(factorial(23)/(factorial(2)*(factorial(20))))*(1/365)
(factorial(n)/(factorial(2)*(factorial(n-2))))*(1/365)
n <- 22
(factorial(n)/(factorial(2)*(factorial(n-2))))*(1/365)
n <- 23
(factorial(n)/(factorial(2)*(factorial(n-2))))*(1/365)
n <- 27
(factorial(n)/(factorial(2)*(factorial(n-2))))*(1/365)
n <- 45
(factorial(n)/(factorial(2)*(factorial(n-2))))*(1/365)
(factorial(n)/(factorial(2)*(factorial(n-2))))
45*44/2
(factorial(n)/(factorial(2)*(factorial(n-2))))*(2/365)^2
#check for HindIII sites on synthetic ES2
rm(list = ls())
setwd(getwd())
library(Biostrings)
library(dplyr)
source('../utilities/header.R')
#check for HindIII sites on synthetic ES2
rm(list = ls())
setwd(getwd())
library(Biostrings)
library(dplyr)
source('../utilities/header.R')
getwd()
#check for HindIII sites on synthetic ES2
rm(list = ls())
setwd(getwd())
library(Biostrings)
library(dplyr)
source('../utilities/header.R')
getwd()
getwd(\)
getwd()
setwd(getwd())
getwd()
source('spacer_fiddling/code/utilities/header.R')
source('./spacer_fiddling/code/utilities/header.R')
source('/spacer_fiddling/code/utilities/header.R')
source('../spacer_fiddling/code/utilities/header.R')
source('../spacer_fiddling/')
setwd(getwd())
library(Biostrings)
library(dplyr)
rm(list = ls())
setwd(getwd())
library(Biostrings)
library(dplyr)
source('../spacer_fiddling/code/utilities/header.R')
source('GitHub/spacer_fiddling/code/utilities/header.R')
setwd("~/GitHub/spacer_fiddling/code/import")
source('../utilities/header.R')
wtEve2 <- as.character(unlist(read.csv(paste0(ReadPath,'eve2depace.txt'))))
wtEve2 <- as.character(unlist(read.csv(paste0(ReadPath,'eve2depace.txt')), header = FALSE))
wtEve2 <- as.character(unlist(read.csv(paste0(ReadPath,'eve2depace.txt'), header = FALSE)))
wtEve2 <- as.character(unlist(read.csv(paste0(ReadPath,'eve2depace.txt'), header = FALSE)))
spc1Eve2 <- as.character(unlist(read.csv(paste0(ReadPath,'eve2spc1depace.txt'), header = FALSE)))
sp1Breaks <- as.vector(unlist(gregexpr('[a-z][A-Z]|[A-Z][a-z]',spc1Eve2)))
spc1Eve2
nchar(gsub([A,T,G,C]','',spc1Eve2)/nchar(spc1Eve2)
nchar(gsub('[A,T,G,C]','',spc1Eve2)/nchar(spc1Eve2)
)
nchar(gsub('[A,T,G,C]','',spc1Eve2))/nchar(spc1Eve2)
install.packages("OligoArrayAux")
libraray(BiocInstaller)
library(BiocInstaller)
bicLite("OligoArrayAux")
biocLite("OligoArrayAux")
library(DECIPHER)
test <- DNAStringSet(wtEve2,spc1Eve2)
test <- DNAStringSet(DNAString(wtEve2),DNAString(spc1Eve2))
test <- c(DNAString(wtEve2),DNAString(spc1Eve2))
test <- DNAStringSet(DNAString(wtEve2),DNAString(spc1Eve2))
test <- c(DNAStringSet(wtEve2),DNAStringSet(spc1Eve2))
test
TileSeqs(test)
TileSeqs("test")
db <- system.file("test", "Bacteria_175seqs.sqlite", package="DECIPHER")
TileSeqs("dp")
TileSeqs(db)
db <- system.file("test", "Bacteria_175seqs.sqlite", package="DECIPHER")
TileSeqs(db, identifier="Pseudomonadales")
db
db <- system.file("test", "test", package="DECIPHER")
db
TileSeqs(test)
TileSeqs(db, tblName = "test")
test <- c(DNAStringSet(wtEve2),DNAStringSet(spc1Eve2))
db <- system.file("test", "test", package="DECIPHER")
TileSeqs(db, tblName = "test")
TileSeqs(test, tblName = "test")
TileSeqs("test", tblName = "test")
install.packages("SQLite")
install.packages("RSQLite")
install.packages("RSQLite")
library(RSQLite)
dbWriteTable("db", test)
dbWriteTable("db", wtEve2)
Seqs2DB(test,XStringSet,"db")
Seqs2DB(test,XStringSet,"db")
Add2DB(test,XStringSet,"db")
library(DECIPHER)
Add2DB(test,XStringSet,"db")
Add.2DB(test,XStringSet,"db")
add.2DB(test,XStringSet,"db")
add2DB(test,XStringSet,"db")
TileSeqs(test,XStringSet,"db")
