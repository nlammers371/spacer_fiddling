check <- vector()
check <- vector()
for (i in 1:length(output[,1])){
check[i] <- output[i,1] + output[i,2]*10 + output[i,3]*10^2 + output[i,4]*10^3 + output[i,5]*10^4
}
check <- order[check]
check <- order[check[i:7260]]
library(dplyr)
check <- arrange(check,V1)
check <- as.data.frame(check)
check <- arrange(check,V1)
View(check)
check <- arrange(check,check)
View(check)
##General Algorithmic Solution to Birthday Problem
rm(list = ls())
n <- 3
k <- 2
template <- matrix(nrow=(n-k), ncol = k)
for (i in 1:k){
for (j in 1:(n-k)){
template[j,i] <- i + j - 1
}
}
View(template)
for (i in 1:k){
for (j in 1:(n-k+1)){
template[j,i] <- i + j - 1
}
}
n <- 3
k <- 2
template <- matrix(nrow=(n-k), ncol = k)
for (i in 1:k){
for (j in 1:(n-k+1)){
template[j,i] <- i + j - 1
}
}
template <- matrix(nrow=(n-k+1), ncol = k)
for (i in 1:k){
for (j in 1:(n-k+1)){
template[j,i] <- i + j - 1
}
}
base <- template
for (i in (k-1):1){
for (j in 1:length(base[,1])) {
if (j != length(base[,1])){
h <- merge(t(base[j,1:i]),as.data.frame(base[j:length(base[,1]),(i+1):k]),by = NULL)
}
else{
h <- cbind(t(base[j,1:i]),t(base[j:length(base[,1]),(i+1):k]))
}
if (j == 1){
g <- h
}
else{
g <- rbind(as.matrix(g),as.matrix(h))
}
}
base <- g
}
View(base)
cells <- n+1
output <- 0*cbind(base,base[,1])
for (i in 1:length(base[,1])){
for (j in (length(base[1,])+1):1){
if (j == (length(base[1,])+1)){
output[i,j] <- cells - base[i,(j-1)]
}
else if (j==1){
output[i,j] <- base[i,j]
}
else{
output[i,j] <- base[i,(j)] - base[i,(j-1)]
}
}
}
View(output)
calc <- matrix(ncol = 2, nrow = length(output[,1]))
for (i in 1:length(output[,1])){
c <- n + 1
m <- 1
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
calc[i,1] <- max(output[i,])
calc[i,2] <- m
}
View(calc)
View(output)
View(calc)
View(h)
View(output)
##General Algorithmic Solution to Birthday Problem
rm(list = ls())
n <- 5
k <- 2
template <- matrix(nrow=(n-k+1), ncol = k)
for (i in 1:k){
for (j in 1:(n-k+1)){
template[j,i] <- i + j - 1
}
}
base <- template
for (i in (k-1):1){
for (j in 1:length(base[,1])) {
if (j != length(base[,1])){
h <- merge(t(base[j,1:i]),as.data.frame(base[j:length(base[,1]),(i+1):k]),by = NULL)
}
else{
h <- cbind(t(base[j,1:i]),t(base[j:length(base[,1]),(i+1):k]))
}
if (j == 1){
g <- h
}
else{
g <- rbind(as.matrix(g),as.matrix(h))
}
}
base <- g
}
##interpret--convert to list of macrostates
cells <- n+1
output <- 0*cbind(base,base[,1])
for (i in 1:length(base[,1])){
for (j in (length(base[1,])+1):1){
if (j == (length(base[1,])+1)){
output[i,j] <- cells - base[i,(j-1)]
}
else if (j==1){
output[i,j] <- base[i,j]
}
else{
output[i,j] <- base[i,(j)] - base[i,(j-1)]
}
}
}
##weight by # microstates
calc <- matrix(ncol = 2, nrow = length(output[,1]))
for (i in 1:length(output[,1])){
c <- n + 1
m <- 1
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
calc[i,1] <- max(output[i,])
calc[i,2] <- m
}
sum(calc[,2])
3^6
rm(list = ls())
n <- 10
k <- 4
template <- matrix(nrow=(n-k+1), ncol = k)
for (i in 1:k){
for (j in 1:(n-k+1)){
template[j,i] <- i + j - 1
}
}
base <- template
for (i in (k-1):1){
for (j in 1:length(base[,1])) {
if (j != length(base[,1])){
h <- merge(t(base[j,1:i]),as.data.frame(base[j:length(base[,1]),(i+1):k]),by = NULL)
}
else{
h <- cbind(t(base[j,1:i]),t(base[j:length(base[,1]),(i+1):k]))
}
if (j == 1){
g <- h
}
else{
g <- rbind(as.matrix(g),as.matrix(h))
}
}
base <- g
}
##interpret--convert to list of macrostates
cells <- n+1
output <- 0*cbind(base,base[,1])
for (i in 1:length(base[,1])){
for (j in (length(base[1,])+1):1){
if (j == (length(base[1,])+1)){
output[i,j] <- cells - base[i,(j-1)]
}
else if (j==1){
output[i,j] <- base[i,j]
}
else{
output[i,j] <- base[i,(j)] - base[i,(j-1)]
}
}
}
##weight by # microstates
calc <- matrix(ncol = 2, nrow = length(output[,1]))
for (i in 1:length(output[,1])){
c <- n + 1
m <- 1
for (j in 1:length(output[1,])){
m <- (factorial(c)/(factorial(output[i,j])*factorial(c-output[i,j])))*m
c <- c - output[i,j]
}
calc[i,1] <- max(output[i,])
calc[i,2] <- m
}
sum(calc[,2])
5^11
(factorial(22)/(factorial(2)(factorial(20))))*(1/365)
(factorial(22)/(factorial(2)*(factorial(20))))*(1/365)
(factorial(21)/(factorial(2)*(factorial(20))))*(1/365)
(factorial(23)/(factorial(2)*(factorial(20))))*(1/365)
(factorial(n)/(factorial(2)*(factorial(n-2))))*(1/365)
n <- 22
(factorial(n)/(factorial(2)*(factorial(n-2))))*(1/365)
n <- 23
(factorial(n)/(factorial(2)*(factorial(n-2))))*(1/365)
n <- 27
(factorial(n)/(factorial(2)*(factorial(n-2))))*(1/365)
n <- 45
(factorial(n)/(factorial(2)*(factorial(n-2))))*(1/365)
(factorial(n)/(factorial(2)*(factorial(n-2))))
45*44/2
(factorial(n)/(factorial(2)*(factorial(n-2))))*(2/365)^2
#check for HindIII sites on synthetic ES2
rm(list = ls())
setwd(getwd())
library(Biostrings)
library(dplyr)
source('../utilities/header.R')
#check for HindIII sites on synthetic ES2
rm(list = ls())
setwd(getwd())
library(Biostrings)
library(dplyr)
source('../utilities/header.R')
getwd()
#check for HindIII sites on synthetic ES2
rm(list = ls())
setwd(getwd())
library(Biostrings)
library(dplyr)
source('../utilities/header.R')
getwd()
wtDNA <- DNAString(wtEve2)
rm(list = ls())
setwd(getwd())
library(Biostrings)
library(dplyr)
source('../utilities/header.R')
wtEve2 <- as.character(unlist(read.csv(paste0(ReadPath,'eve2depace.txt'), header = FALSE)))
spc1Eve2 <- as.character(unlist(read.csv(paste0(ReadPath,'eve2spc1depace.txt'), header = FALSE)))
wtDNA <- DNAString(wtEve2)
getwd()
source('.GitHub/spacer_fiddling/code/utilities/header.R')
source('./GitHub/spacer_fiddling/code/utilities/header.R')
wtEve2 <- as.character(unlist(read.csv(paste0(ReadPath,'eve2depace.txt'), header = FALSE)))
spc1Eve2 <- as.character(unlist(read.csv(paste0(ReadPath,'eve2spc1depace.txt'), header = FALSE)))
}
setwd(paste0(getwd(),"./GitHub/spacer_fiddling/code/utilities/")
)
source('../utilities/header.R')
wtEve2 <- as.character(unlist(read.csv(paste0(ReadPath,'eve2depace.txt'), header = FALSE)))
spc1Eve2 <- as.character(unlist(read.csv(paste0(ReadPath,'eve2spc1depace.txt'), header = FALSE)))
wtDNA <- DNAString(wtEve2)
spc1DNA <- DNAString(spc1Eve2)
sp1Breaks <- as.vector(unlist(gregexpr('[a-z][A-Z]|[A-Z][a-z]',spc1Eve2)))
pInd <- 1
cons <- vector()
spacer <- vector()
for (i in 1:length(sp1Breaks)){
Ind <- sp1Breaks[i]
sp1seq <- spc1DNA[pInd:Ind]
if (max(unlist(gregexpr('[A-Z]',sp1seq)) > 0){
spacer <- append(spacer,sp1seq)
}
else{
cons <- append(cons,sp1Seq)
}
pInd <- Ind + 1
}
pInd <- 1
cons <- vector()
spacer <- vector()
for (i in 1:length(sp1Breaks)){
Ind <- sp1Breaks[i]
sp1seq <- spc1DNA[pInd:Ind]
if (max(unlist(gregexpr('[A-Z]',sp1seq)) > 0)){
spacer <- append(spacer,sp1seq)
}
else{
cons <- append(cons,sp1Seq)
}
pInd <- Ind + 1
}
pInd <- 1
cons <- vector()
spacer <- vector()
for (i in 1:length(sp1Breaks)){
Ind <- sp1Breaks[i]
sp1seq <- spc1DNA[pInd:Ind]
if (max(unlist(gregexpr('[A-Z]',sp1seq)) > 0)){
spacer <- append(spacer,paste0(sp1seq))
}
else{
cons <- append(cons,paste0(sp1Seq))
}
pInd <- Ind + 1
}
pInd <- 1
cons <- vector()
spacer <- vector()
for (i in 1:length(sp1Breaks)){
Ind <- sp1Breaks[i]
sp1seq <- substr(spc1Eve2,pInd,Ind)
if (max(unlist(gregexpr('[A-Z]',sp1seq)) > 0)){
spacer <- append(spacer,sp1seq)
}
else{
cons <- append(cons,sp1Seq)
}
pInd <- Ind + 1
}
sp1seq <- substr(spc1Eve2,pInd,Ind)
pInd <- 1
cons <- vector()
spacer <- vector()
for (i in 1:length(sp1Breaks)){
Ind <- sp1Breaks[i]
sp1seq <- substr(spc1Eve2,pInd,Ind)
if (max(unlist(gregexpr('[A-Z]',sp1seq)) > 0)){
spacer <- append(spacer,sp1seq)
}
else{
cons <- append(cons,sp1seq)
}
pInd <- Ind + 1
}
cons
spc1Eve2
gsub('[A-Z]','-',spc1Eve2)
s <- 1
cons <- vector()
spacer <- vector()
for (i in 2:length(sp1Breaks)){
e <- sp1Breaks[i]
sp1seq <- substr(spc1Eve2,s,e)
consseq <- substr(wtEve2,s,e)
spacer <- append(spacer,sp1seq)
cons <- append(cons,sp1seq)
s <- sp1Breaks[i-1] + 1
}
spacer
cons
pInd <- 1
cons <- vector()
spacer <- vector()
for (i in 2:length(sp1Breaks)){
Ind <- sp1Breaks[i]
sp1Seq <- substr(spc1Eve2,pInd,Ind)
conSeq <- substr(wtEve2,pInd,Ind)
spacer <- append(spacer,sp1Seq)
cons <- append(cons,conSeq)
pInd <- Ind + 1
}
spacer
cons <- vector()
spacer1 <- vector()
for (i in 2:length(sp1Breaks)){
Ind <- sp1Breaks[i]
sp1Seq <- substr(spc1Eve2,pInd,Ind)
conSeq <- substr(wtEve2,pInd,Ind)
spacer1 <- append(spacer,sp1Seq)
cons <- append(cons,conSeq)
pInd <- Ind + 1
}
write(spacer1[],paste0(AnalyzePath,'spacer1.txt'))
cons <- vector()
spacer1 <- vector()
for (i in 2:(length(sp1Breaks)-1)){
Ind <- sp1Breaks[i]
sp1Seq <- substr(spc1Eve2,pInd,Ind)
conSeq <- substr(wtEve2,pInd,Ind)
spacer1 <- append(spacer,sp1Seq)
cons <- append(cons,conSeq)
pInd <- Ind + 1
}
write(spacer1[],paste0(AnalyzePath,'spacer1.txt'))
Ind
pInd
pInd <- 1
cons <- vector()
spacer1 <- vector()
for (i in 2:length(sp1Breaks)){
Ind <- sp1Breaks[i]
sp1Seq <- substr(spc1Eve2,pInd,Ind)
conSeq <- substr(wtEve2,pInd,Ind)
spacer1 <- append(spacer,sp1Seq)
cons <- append(cons,conSeq)
pInd <- Ind + 1
}
spacer1
pInd
Ind
sp1Breaks <- append(as.vector(unlist(gregexpr('[a-z][A-Z]|[A-Z][a-z]',spc1Eve2))),nchar(sp1Breaks))
pInd <- 1
cons <- vector()
spacer1 <- vector()
for (i in 2:(length(sp1Breaks)-1)){
Ind <- sp1Breaks[i]
sp1Seq <- substr(spc1Eve2,pInd,Ind)
conSeq <- substr(wtEve2,pInd,Ind)
spacer1 <- append(spacer,sp1Seq)
cons <- append(cons,conSeq)
pInd <- Ind + 1
}
write(spacer1[],paste0(AnalyzePath,'spacer1.txt'))
spacer1
Ind
pInd
sp1Breaks
sp1Breaks <- append(as.vector(unlist(gregexpr('[a-z][A-Z]|[A-Z][a-z]',spc1Eve2))),nchar(speEve2))
sp1Breaks <- append(as.vector(unlist(gregexpr('[a-z][A-Z]|[A-Z][a-z]',spc1Eve2))),nchar(spc1Eve2))
sp1Breaks
pInd <- 1
cons <- vector()
spacer1 <- vector()
for (i in 2:(length(sp1Breaks)-1)){
Ind <- sp1Breaks[i]
sp1Seq <- substr(spc1Eve2,pInd,Ind)
conSeq <- substr(wtEve2,pInd,Ind)
spacer1 <- append(spacer,sp1Seq)
cons <- append(cons,conSeq)
pInd <- Ind + 1
}
spacer1
Ind
pInd <- 1
cons <- vector()
spacer1 <- vector()
for (i in 2:(length(sp1Breaks))){
Ind <- sp1Breaks[i]
sp1Seq <- substr(spc1Eve2,pInd,Ind)
conSeq <- substr(wtEve2,pInd,Ind)
spacer1 <- append(spacer,sp1Seq)
cons <- append(cons,conSeq)
pInd <- Ind + 1
}
spacer1
spc1Eve2
write(spacer1[],paste0(AnalyzePath,'spacer1.txt'))
unlist(strsplit(spc1Eve2,"[A-Z][a-z]|[a-z][A-Z]"))
spacer1 <- unlist(strsplit(spc1Eve2,"[A-Z][a-z]|[a-z][A-Z]"))
write(spacer1[],paste0(AnalyzePath,'spacer1.txt'))
pInd <- 1
cons <- vector()
spacer1 <- vector()
for (i in 2:(length(sp1Breaks))){
Ind <- sp1Breaks[i]
sp1Seq <- substr(spc1Eve2,pInd,Ind)
conSeq <- substr(wtEve2,pInd,Ind)
spacer1 <- append(spacer,sp1Seq)
cons <- append(cons,conSeq)
pInd <- Ind + 1
}
write(spacer1[],paste0(AnalyzePath,'spacer1.txt'))
pInd <- 1
cons <- vector()
spacer1 <- vector()
for (i in 1:(length(sp1Breaks))){
Ind <- sp1Breaks[i]
sp1Seq <- substr(spc1Eve2,pInd,Ind)
conSeq <- substr(wtEve2,pInd,Ind)
spacer1 <- append(spacer,sp1Seq)
cons <- append(cons,conSeq)
pInd <- Ind + 1
}
write(spacer1[],paste0(AnalyzePath,'spacer1.txt'))
spacer1
sq1Breaks
spc1Breaks
sp1Breaks
pInd <- 1
cons <- vector()
spacer1 <- vector()
for (i in 1:1){
Ind <- sp1Breaks[i]
sp1Seq <- substr(spc1Eve2,pInd,Ind)
conSeq <- substr(wtEve2,pInd,Ind)
spacer1 <- append(spacer,sp1Seq)
cons <- append(cons,conSeq)
pInd <- Ind + 1
}
Ind
pInd
spacer1
spacer1 <- vector()
pInd <- 1
cons <- vector()
spacer1 <- vector()
for (i in 1:(length(sp1Breaks))){
Ind <- sp1Breaks[i]
sp1Seq <- substr(spc1Eve2,pInd,Ind)
conSeq <- substr(wtEve2,pInd,Ind)
spacer1 <- append(spacer1,sp1Seq)
cons <- append(cons,conSeq)
pInd <- Ind + 1
}
spacer1
write(spacer1[],paste0(AnalyzePath,'spacer1.txt'))
